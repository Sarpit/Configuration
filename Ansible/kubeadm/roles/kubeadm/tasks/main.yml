---
 - name: Install kubeadm dependencies
   ansible.builtin.apt:
     name: 
     - apt-transport-https
     - curl
     state: present
     update_cache: yes
     
 - name: Adding Kubernetes apt-key
   ansible.builtin.apt_key:
     url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
     state: present

 - name: Adding Kubernetes apt repository
   ansible.builtin.apt_repository:
     repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
     state: present
     filename: kubernetes

 - name: Install Kubernetes packages
   ansible.builtin.apt:
     name: 
     - kubelet
     - kubeadm
     - kubectl
     state: present
     update_cache: yes

 - name: Marking hold on Kubernetes packages
   ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
   loop: "{{ k8s_packages }}"

 - name: Checking if br_netfilter module is loaded
   #ansible.builtin.shell:
   shell: lsmod | grep br_netfilter
   register: load
 
 - ansible.builtin.fail:
     msg: "br_netfilter module is not loaded"
   when: '"br_netfilter" not in load.stdout'

 - name: Starting kubelet
   #ansible.poxis.service:
   service:
     name: kubelet
     state: started
     enabled: true
   when: '"br_netfilter" in load.stdout'

 - name: checking if kubeadm is initilased
   ansible.builtin.stat:
     path: /etc/kubernetes/admin.conf
   register: file_status

 - name: Initializing kubeadm cluster
   #ansible.builtin.shell:
   shell: |
     kubeadm init --pod-network-cidr=10.85.0.0/16 --cri-socket=unix:///var/run/crio/crio.sock
   when: file_status.stat.exists is eq(false)
   register: init

 - name: Printing kubeadm init output
   ansible.builtin.debug: var=init.stdout_lines

 - block:
   - name: Creating .kube dir
     ansible.builtin.file:
       path: "{{ ansible_env.HOME }}/.kube"
       state: directory

   - name: checking if kubeadm is initilased
     ansible.builtin.stat:
       path: "{{ ansible_env.HOME }}/.kube/config"
     register: config_status

   - name: Copying config file
     #ansible.builtin.shell:
     shell: |
       sudo cp -i /etc/kubernetes/admin.conf {{ ansible_env.HOME }}/.kube/config
       sudo chown {{ ansible_env.USER }}:{{ ansible_env.USER }} {{ ansible_env.HOME }}/.kube/config
     when: config_status.stat.exists is eq(false)
     register: cp

   - name: Manual copy
     ansible.builtin.debug:
       msg: |
         manually run the follwoing command:
         1. sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config"
         2. sudo chown $(id -u):$(id -g) $HOME/.kube/config
     when: cp is defined and cp.failed == true
   ignore_errors: true